# 0-add_integer.txt

===============================
 How to Use 0-add_integer.py
===============================

This library is very simple, since it only has one function called
''add_integer(a, b=98)''.

Usage
=======

''add_integer(...)'' return the sum of its arguments. For numbers,
that value is equivalent to using the ''+'' operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

It also works for float by typecast them in to integers

::

	>>> add_integer(2.0, 3.0)
	5
	>>> add_integer(2.0)
	100

also works for negative number whether it is float or integer

::

	>>> add_integer(-2, -3)
	-5
	>>> add_integer(-10)
	88

for negative float numbers

::

	>>> add_integer(-2.0, -3.0)
	-5
	>>> add_integer(-10.5)
	88


Non-Numbers
===========

''add_integer(a, b=98)'' raise TypeError

::

	>>> add_integer('hello', 3.0)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2, 'hello')
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer


if both arguments are non-integer or non-float it will raise TypeError
with a message a must be an integer

::

	>>> add_integer("hello", "world")
	Traceback (most recent call last):
	TypeError: a must be an integer

if infinity is passed to the parameter the function will fall to add

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

if NaN(Not A Number) is passed to one of the argument it will
also fail to add the arguments

::

	>>> add_integer(float('NaN'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
